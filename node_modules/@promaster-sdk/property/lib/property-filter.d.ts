import { UnitMap } from "uom";
import * as PropertyValueSet from "./property-value-set";
import * as PropertyValue from "./property-value";
import * as Ast from "./property-filter-ast/index";
export interface PropertyFilter {
    readonly text: string;
    readonly ast: Ast.BooleanExpr;
    readonly _evaluate: Ast.CompiledFilterFunction;
}
export declare const Empty: PropertyFilter;
export declare function fromString(filter: string, unitLookup: UnitMap.UnitLookup): PropertyFilter | undefined;
export declare function fromStringOrEmpty(filterString: string, unitLookup: UnitMap.UnitLookup): PropertyFilter;
export declare function isSyntaxValid(filter: string, unitLookup: UnitMap.UnitLookup, propertyNames?: ReadonlyArray<string> | undefined): boolean;
export declare function isValid(properties: PropertyValueSet.PropertyValueSet, filter: PropertyFilter, comparer?: PropertyValue.Comparer): boolean;
export declare function isValidMatchMissing(properties: PropertyValueSet.PropertyValueSet, filter: PropertyFilter, comparer?: PropertyValue.Comparer): boolean;
export declare function getReferencedProperties(filter: PropertyFilter): ReadonlyArray<string>;
export declare function toString(filter: PropertyFilter): string;
export declare function equals(other: PropertyFilter, filter: PropertyFilter): boolean;
//# sourceMappingURL=property-filter.d.ts.map