"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.equals = exports.toString = exports.getReferencedProperties = exports.isValidMatchMissing = exports.isValid = exports.isSyntaxValid = exports.fromStringOrEmpty = exports.fromString = exports.Empty = void 0;
const lru_cache_1 = __importDefault(require("lru-cache"));
const PropertyValue = __importStar(require("./property-value"));
const Ast = __importStar(require("./property-filter-ast/index"));
const maxLRUCacheSize = ((_b = (_a = globalThis.process) === null || _a === void 0 ? void 0 : _a.env) === null || _b === void 0 ? void 0 : _b.PROPERTY_FILTER_CACHE_SIZE)
    ? Number(process.env.PROPERTY_FILTER_CACHE_SIZE)
    : 20000;
const LRUCacheOptions = {
    max: maxLRUCacheSize, // Arbitrary number. Uses on average up to 400mb
};
const _cache = new lru_cache_1.default(LRUCacheOptions);
exports.Empty = {
    text: "",
    ast: Ast.newEmptyExpr(),
    _evaluate: () => true,
};
function create(text, ast) {
    return { text, ast, _evaluate: Ast.compileAst(ast) };
}
function fromString(filter, unitLookup) {
    if (filter === null || filter === undefined) {
        throw new Error("Argument 'filter' must be defined.");
    }
    if (!_cache.has(filter)) {
        if (filter === "" || filter.trim().length === 0) {
            return exports.Empty;
        }
        const ast = Ast.parse(filter, unitLookup, false);
        if (ast === undefined) {
            console.warn("Invalid property filter syntax: " + filter);
            return undefined;
        }
        _cache.set(filter, create(filter, ast));
    }
    return _cache.get(filter);
}
exports.fromString = fromString;
function fromStringOrEmpty(filterString, unitLookup) {
    const filter = fromString(filterString, unitLookup);
    if (filter === undefined) {
        return exports.Empty;
    }
    return filter;
}
exports.fromStringOrEmpty = fromStringOrEmpty;
function isSyntaxValid(filter, unitLookup, propertyNames = undefined) {
    if (filter === null || filter === undefined) {
        throw new Error("Argument 'filter' must be defined.");
    }
    if (filter === "" || filter.trim().length === 0) {
        return true;
    }
    const ast = Ast.parse(filter, unitLookup, false);
    if (ast === undefined) {
        return false;
    }
    if (propertyNames === undefined) {
        return true;
    }
    const parsed = create(filter, ast);
    const properties = getReferencedProperties(parsed);
    for (const p of properties) {
        if (propertyNames.indexOf(p) === -1) {
            return false;
        }
    }
    return true;
}
exports.isSyntaxValid = isSyntaxValid;
function isValid(properties, filter, comparer = PropertyValue.defaultComparer) {
    return filter._evaluate(properties, comparer);
}
exports.isValid = isValid;
function isValidMatchMissing(properties, filter, comparer = PropertyValue.defaultComparer) {
    if (properties === null || properties === undefined) {
        throw new Error("Argument 'properties' must be defined.");
    }
    if (filter === null || filter === undefined) {
        throw new Error("Argument 'filter' must be defined.");
    }
    return Ast.evaluateAst(filter.ast, properties, true, comparer);
}
exports.isValidMatchMissing = isValidMatchMissing;
function getReferencedProperties(filter) {
    if (filter === null || filter === undefined) {
        throw new Error("Argument 'filter' must be defined.");
    }
    const properties = [];
    Ast.findProperties(filter.ast, properties);
    return properties;
}
exports.getReferencedProperties = getReferencedProperties;
function toString(filter) {
    if (filter === null || filter === undefined) {
        throw new Error("Argument 'filter' must be defined.");
    }
    return filter.text !== null ? filter.text : "";
}
exports.toString = toString;
function equals(other, filter) {
    if (filter === other) {
        return true;
    }
    if (filter === null || filter === undefined) {
        return false;
    }
    if (other === null || other === undefined) {
        return false;
    }
    return other.text === filter.text;
}
exports.equals = equals;
//# sourceMappingURL=property-filter.js.map