import { Amount, UnitMap } from "uom";
import * as PropertyValue from "./property-value";
import { PropertyType } from "./property-value";
export interface PropertyValueSet {
    readonly [key: string]: PropertyValue.PropertyValue;
}
export interface PropertyKeyValuePair {
    readonly key: string;
    readonly value: PropertyValue.PropertyValue;
}
export declare const Empty: PropertyValueSet;
export declare function fromString(encodedValueSet: string, unitLookup: UnitMap.UnitLookup): PropertyValueSet;
export declare function fromStringOrError(onError: (encodedValueSet: string) => PropertyValueSet, encodedValueSet: string, unitLookup: UnitMap.UnitLookup): PropertyValueSet;
export declare function fromProperty(propertyName: string, propertyValue: PropertyValue.PropertyValue): PropertyValueSet;
export declare function isEmpty(propertyValueSet: PropertyValueSet | null | undefined): boolean;
export declare function count(pvs: PropertyValueSet): number;
export declare function get(propertyName: string, pvs: PropertyValueSet): PropertyValue.PropertyValue | undefined;
export declare function hasProperty(propertyName: string, pvs: PropertyValueSet): boolean;
export declare function getPropertyNames(pvs: PropertyValueSet): ReadonlyArray<string>;
export declare function merge(mergeWith: PropertyValueSet, pvs: PropertyValueSet): PropertyValueSet;
export declare function setValues(replacementSet: PropertyValueSet, pvs: PropertyValueSet): PropertyValueSet;
export declare function set(propertyName: string, propertyValue: PropertyValue.PropertyValue, pvs: PropertyValueSet): PropertyValueSet;
export declare function setAmount<T>(propertyName: string, amountValue: Amount.Amount<T>, pvs: PropertyValueSet): PropertyValueSet;
export declare function setInteger(propertyName: string, integerValue: number, pvs: PropertyValueSet): PropertyValueSet;
export declare function setText(propertyName: string, textValue: string, pvs: PropertyValueSet): PropertyValueSet;
/**
 * Only keep properties whos name exist in the propertyNames array
 * @param propertyNames Array of propertyNames to keep
 * @param pvs PropertyValueSet to strip unwanted properties from
 */
export declare function keepProperties(propertyNames: ReadonlyArray<string>, pvs: PropertyValueSet): PropertyValueSet;
export declare function removeProperties(propertyNames: ReadonlyArray<string>, pvs: PropertyValueSet): PropertyValueSet;
export declare function removeProperty(propertyName: string, pvs: PropertyValueSet): PropertyValueSet;
export declare function getValue(propertyName: string, pvs: PropertyValueSet): PropertyValue.PropertyValue;
export declare function getAmount<T>(propertyName: string, pvs: PropertyValueSet): Amount.Amount<T> | undefined;
export declare function getText(propertyName: string, pvs: PropertyValueSet): string | undefined;
export declare function getInteger(propertyName: string, pvs: PropertyValueSet): number | undefined;
export declare function filter(fn: (kvp: PropertyKeyValuePair) => boolean, pvs: PropertyValueSet): PropertyValueSet;
export declare function map(fn: (kvp: PropertyKeyValuePair) => PropertyKeyValuePair, pvs: PropertyValueSet): PropertyValueSet;
export declare function getValuesOfType(type: PropertyType, pvs: PropertyValueSet): PropertyValueSet;
export declare function toString(pvs: PropertyValueSet): string;
export declare function toStringInSpecifiedOrder(order: ReadonlyArray<string>, pvs: PropertyValueSet): string;
export declare function equals(other: PropertyValueSet, pvs: PropertyValueSet, comparer?: PropertyValue.Comparer): boolean;
//# sourceMappingURL=property-value-set.d.ts.map