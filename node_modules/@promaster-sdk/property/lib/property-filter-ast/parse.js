"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parse = void 0;
const Ast = __importStar(require("./types"));
const Parser = __importStar(require("./pegjs/generated-parser"));
function buildOptions(unitLookup) {
    const parserCallbacks = {
        createValueExpr: (unParsed) => Ast.newValueExpr(unParsed, unitLookup),
        createNullExpr: Ast.newNullExpr,
        createIdentifierExpr: Ast.newIdentifierExpr,
        createValueRangeExpr: Ast.newValueRangeExpr,
        createEqualsExpr: Ast.newEqualsExpr,
        createComparisonExpr: Ast.newComparisonExpr,
        createAndExpr: Ast.newAndExpr,
        createOrExpr: Ast.newOrExpr,
        createAddExpr: Ast.newAddExpr,
        createMulExpr: Ast.newMulExpr,
        createUnaryExpr: Ast.newUnaryExpr,
    };
    const options = {
        startRule: "start",
        tracer: undefined,
        callbacks: parserCallbacks,
    };
    return options;
}
function parse(text, unitLookup, throwOnInvalidSyntax = false) {
    try {
        const options = buildOptions(unitLookup);
        const result = Parser.parse(text, options);
        return result;
    }
    catch (error) {
        if (throwOnInvalidSyntax) {
            throw error;
        }
        else {
            return undefined;
        }
    }
}
exports.parse = parse;
//# sourceMappingURL=parse.js.map