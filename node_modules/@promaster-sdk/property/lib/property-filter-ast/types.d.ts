import { UnitMap } from "uom";
import * as PropertyValue from "../property-value";
export declare type Expr = BooleanExpr | PropertyValueExpr | ValueRangeExpr;
export declare type BooleanExpr = OrExpr | AndExpr | EqualsExpr | ComparisonExpr | EmptyExpr;
export interface OrExpr {
    readonly type: "OrExpr";
    readonly children: ReadonlyArray<BooleanExpr>;
}
export declare function newOrExpr(children: ReadonlyArray<BooleanExpr>): OrExpr;
export interface AndExpr {
    readonly type: "AndExpr";
    readonly children: ReadonlyArray<BooleanExpr>;
}
export declare function newAndExpr(children: ReadonlyArray<BooleanExpr>): AndExpr;
export interface EmptyExpr {
    readonly type: "EmptyExpr";
}
export declare function newEmptyExpr(): EmptyExpr;
export interface EqualsExpr {
    readonly type: "EqualsExpr";
    readonly leftValue: PropertyValueExpr;
    readonly operationType: EqualsOperationType;
    readonly rightValueRanges: ReadonlyArray<ValueRangeExpr>;
}
export declare type EqualsOperationType = "equals" | "notEquals";
export declare function newEqualsExpr(leftValue: PropertyValueExpr, operationType: EqualsOperationType, rightValueRanges: ReadonlyArray<ValueRangeExpr>): EqualsExpr;
export interface ValueRangeExpr {
    readonly type: "ValueRangeExpr";
    readonly min: PropertyValueExpr;
    readonly max: PropertyValueExpr;
}
export declare function newValueRangeExpr(min: PropertyValueExpr, max: PropertyValueExpr): ValueRangeExpr;
export interface ComparisonExpr {
    readonly type: "ComparisonExpr";
    readonly leftValue: PropertyValueExpr;
    readonly operationType: ComparisonOperationType;
    readonly rightValue: PropertyValueExpr;
}
export declare type ComparisonOperationType = "greater" | "less" | "greaterOrEqual" | "lessOrEqual";
export declare function newComparisonExpr(leftValue: PropertyValueExpr, operationType: ComparisonOperationType, rightValue: PropertyValueExpr): ComparisonExpr;
export declare type PropertyValueExpr = IdentifierExpr | ValueExpr | NullExpr | AddExpr | MulExpr | UnaryExpr;
export interface IdentifierExpr {
    readonly type: "IdentifierExpr";
    readonly name: string;
}
export declare function newIdentifierExpr(name: string): IdentifierExpr;
export interface ValueExpr {
    readonly type: "ValueExpr";
    readonly unParsed: string;
    readonly parsed: PropertyValue.PropertyValue;
}
export declare function newValueExpr(unParsed: string, unitLookup: UnitMap.UnitLookup): ValueExpr;
export interface NullExpr {
    readonly type: "NullExpr";
}
export declare function newNullExpr(): NullExpr;
export interface AddExpr {
    readonly type: "AddExpr";
    readonly left: PropertyValueExpr;
    readonly operationType: AddExprOperationType;
    readonly right: PropertyValueExpr;
}
export declare type AddExprOperationType = "add" | "subtract";
export declare function newAddExpr(left: PropertyValueExpr, operationType: AddExprOperationType, right: PropertyValueExpr): AddExpr;
export interface MulExpr {
    readonly type: "MulExpr";
    readonly left: PropertyValueExpr;
    readonly operationType: MulExprOperationType;
    readonly right: PropertyValueExpr;
}
export declare type MulExprOperationType = "multiply" | "divide";
export declare function newMulExpr(left: PropertyValueExpr, operationType: MulExprOperationType, right: PropertyValueExpr): MulExpr;
export declare type UnaryExprOperationType = "negative";
export interface UnaryExpr {
    readonly type: "UnaryExpr";
    readonly operationType: UnaryExprOperationType;
    readonly value: PropertyValueExpr;
}
export declare function newUnaryExpr(operationType: UnaryExprOperationType, value: PropertyValueExpr): UnaryExpr;
//# sourceMappingURL=types.d.ts.map