"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeEvalLambdaForPropertyValueExpr = exports.compileToLambdas = void 0;
const PropertyValue = __importStar(require("../property-value"));
const PropertyValueSet = __importStar(require("../property-value-set"));
const exhaustive_check_1 = require("../utils/exhaustive-check");
function compileToLambdas(e) {
    switch (e.type) {
        case "AndExpr": {
            const childrenLamdas = e.children.map(compileToLambdas);
            return (properties, comparer) => childrenLamdas.every((child) => child(properties, comparer));
        }
        case "OrExpr": {
            const childrenLamdas = e.children.map(compileToLambdas);
            return (properties, comparer) => !!childrenLamdas.find((child) => child(properties, comparer));
        }
        case "EqualsExpr": {
            const leftLamda = makeEvalLambdaForPropertyValueExpr(e.leftValue);
            const rightLamdas = e.rightValueRanges.map((range) => [
                makeEvalLambdaForPropertyValueExpr(range.min),
                makeEvalLambdaForPropertyValueExpr(range.max),
            ]);
            return (pvs, comparer) => {
                const left = leftLamda(pvs);
                for (const range of rightLamdas) {
                    const min = range[0](pvs);
                    const max = range[1](pvs);
                    // Match on NULL or inclusive in range
                    if (((max === null || min === null) && left === null) ||
                        (left !== null &&
                            min !== null &&
                            max !== null &&
                            PropertyValue.greaterOrEqualTo(left, min, comparer) &&
                            PropertyValue.lessOrEqualTo(left, max, comparer))) {
                        return e.operationType === "equals";
                    }
                }
                return e.operationType === "notEquals";
            };
        }
        case "ComparisonExpr": {
            //   // Handle match missing identifier
            //   if (
            //     matchMissingIdentifiers &&
            //     (_isMissingIdent(e.leftValue, properties) ||
            //       _isMissingIdent(e.rightValue, properties))
            //   ) {
            //     return true;
            //   }
            //   const left = evaluatePropertyValueExpr(e.leftValue, properties);
            //   if (left === null) {
            //     return false;
            //   }
            //   const right = evaluatePropertyValueExpr(e.rightValue, properties);
            //   if (right === null) {
            //     return false;
            //   }
            //   switch (e.operationType) {
            //     case "less":
            //       return PropertyValue.lessThan(left, right);
            //     case "greater":
            //       return PropertyValue.greaterThan(left, right);
            //     case "lessOrEqual":
            //       return PropertyValue.lessOrEqualTo(left, right);
            //     case "greaterOrEqual":
            //       return PropertyValue.greaterOrEqualTo(left, right);
            //     default:
            //       throw new Error(`Unknown comparisontype`);
            //   }
            return () => true;
        }
        case "EmptyExpr": {
            return () => true;
        }
        default: {
            // return () => true;
            return exhaustive_check_1.exhaustiveCheck(e, true);
        }
    }
}
exports.compileToLambdas = compileToLambdas;
function makeEvalLambdaForPropertyValueExpr(e) {
    switch (e.type) {
        case "IdentifierExpr": {
            return (pvs) => {
                const pv = PropertyValueSet.get(e.name, pvs);
                return pv || null;
            };
        }
        case "ValueExpr": {
            return () => e.parsed;
        }
        case "NullExpr": {
            return () => null;
        }
        case "AddExpr": {
            return () => null;
        }
        case "MulExpr": {
            return () => null;
        }
        case "UnaryExpr": {
            return () => null;
        }
        default: {
            return exhaustive_check_1.exhaustiveCheck(e, true);
        }
    }
}
exports.makeEvalLambdaForPropertyValueExpr = makeEvalLambdaForPropertyValueExpr;
//# sourceMappingURL=compile-to-lambdas.js.map