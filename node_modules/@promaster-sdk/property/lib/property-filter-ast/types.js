"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.newUnaryExpr = exports.newMulExpr = exports.newAddExpr = exports.newNullExpr = exports.newValueExpr = exports.newIdentifierExpr = exports.newComparisonExpr = exports.newValueRangeExpr = exports.newEqualsExpr = exports.newEmptyExpr = exports.newAndExpr = exports.newOrExpr = void 0;
const PropertyValue = __importStar(require("../property-value"));
function newOrExpr(children) {
    return { type: "OrExpr", children };
}
exports.newOrExpr = newOrExpr;
function newAndExpr(children) {
    return { type: "AndExpr", children };
}
exports.newAndExpr = newAndExpr;
function newEmptyExpr() {
    return { type: "EmptyExpr" };
}
exports.newEmptyExpr = newEmptyExpr;
function newEqualsExpr(leftValue, operationType, rightValueRanges) {
    return { type: "EqualsExpr", leftValue, operationType, rightValueRanges };
}
exports.newEqualsExpr = newEqualsExpr;
function newValueRangeExpr(min, max) {
    return { type: "ValueRangeExpr", min, max };
}
exports.newValueRangeExpr = newValueRangeExpr;
function newComparisonExpr(leftValue, operationType, rightValue) {
    return { type: "ComparisonExpr", leftValue, operationType, rightValue };
}
exports.newComparisonExpr = newComparisonExpr;
function newIdentifierExpr(name) {
    return { type: "IdentifierExpr", name };
}
exports.newIdentifierExpr = newIdentifierExpr;
function newValueExpr(unParsed, unitLookup) {
    const parsed = PropertyValue.fromString(unParsed, unitLookup);
    if (parsed === undefined) {
        throw new Error(`Invalid property value ${unParsed}`);
    }
    if (parsed.type === "integer" && unParsed.includes(".")) {
        return {
            type: "ValueExpr",
            unParsed,
            parsed: PropertyValue.fromInteger(parseFloat(unParsed)),
        };
    }
    return { type: "ValueExpr", unParsed, parsed };
}
exports.newValueExpr = newValueExpr;
function newNullExpr() {
    return { type: "NullExpr" };
}
exports.newNullExpr = newNullExpr;
function newAddExpr(left, operationType, right) {
    return { type: "AddExpr", left, operationType, right };
}
exports.newAddExpr = newAddExpr;
function newMulExpr(left, operationType, right) {
    return { type: "MulExpr", left, operationType, right };
}
exports.newMulExpr = newMulExpr;
function newUnaryExpr(operationType, value) {
    return {
        type: "UnaryExpr",
        operationType,
        value,
    };
}
exports.newUnaryExpr = newUnaryExpr;
//# sourceMappingURL=types.js.map