"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.evaluateAst = void 0;
const uom_1 = require("uom");
const PropertyValue = __importStar(require("../property-value"));
const PropertyValueSet = __importStar(require("../property-value-set"));
const exhaustive_check_1 = require("../utils/exhaustive-check");
function evaluateAst(e, properties, matchMissingIdentifiers, comparer = PropertyValue.defaultComparer) {
    switch (e.type) {
        case "AndExpr": {
            for (const child of e.children) {
                if (!evaluateAst(child, properties, matchMissingIdentifiers, comparer)) {
                    return false;
                }
            }
            return true;
        }
        case "OrExpr": {
            for (const child of e.children) {
                if (evaluateAst(child, properties, matchMissingIdentifiers, comparer)) {
                    return true;
                }
            }
            return false;
        }
        case "EqualsExpr": {
            // Handle match missing identifier
            if (matchMissingIdentifiers) {
                if (_isMissingIdent(e.leftValue, properties) ||
                    e.rightValueRanges.filter((vr) => _isMissingIdent(vr.min, properties) || _isMissingIdent(vr.max, properties)).length > 0) {
                    return true;
                }
            }
            const left = evaluatePropertyValueExpr(e.leftValue, properties);
            for (const range of e.rightValueRanges) {
                const min = evaluatePropertyValueExpr(range.min, properties);
                const max = evaluatePropertyValueExpr(range.max, properties);
                // Match on NULL or inclusive in range
                if (((max === null || min === null) && left === null) ||
                    (left !== null &&
                        min !== null &&
                        max !== null &&
                        PropertyValue.greaterOrEqualTo(left, min, comparer) &&
                        PropertyValue.lessOrEqualTo(left, max, comparer))) {
                    return e.operationType === "equals";
                }
            }
            return e.operationType === "notEquals";
        }
        case "ComparisonExpr": {
            // Handle match missing identifier
            if (matchMissingIdentifiers &&
                (_isMissingIdent(e.leftValue, properties) || _isMissingIdent(e.rightValue, properties))) {
                return true;
            }
            const left = evaluatePropertyValueExpr(e.leftValue, properties);
            if (left === null) {
                return false;
            }
            const right = evaluatePropertyValueExpr(e.rightValue, properties);
            if (right === null) {
                return false;
            }
            switch (e.operationType) {
                case "less":
                    return PropertyValue.lessThan(left, right, comparer);
                case "greater":
                    return PropertyValue.greaterThan(left, right, comparer);
                case "lessOrEqual":
                    return PropertyValue.lessOrEqualTo(left, right, comparer);
                case "greaterOrEqual":
                    return PropertyValue.greaterOrEqualTo(left, right, comparer);
                default:
                    throw new Error(`Unknown comparisontype`);
            }
        }
        case "EmptyExpr": {
            return true;
        }
        default: {
            return exhaustive_check_1.exhaustiveCheck(e, true);
        }
    }
}
exports.evaluateAst = evaluateAst;
function evaluatePropertyValueExpr(e, properties) {
    switch (e.type) {
        case "IdentifierExpr": {
            const pv = PropertyValueSet.get(e.name, properties);
            return pv || null;
        }
        case "ValueExpr": {
            return e.parsed;
        }
        case "NullExpr": {
            return null;
        }
        case "AddExpr": {
            const left = evaluatePropertyValueExpr(e.left, properties);
            const right = evaluatePropertyValueExpr(e.right, properties);
            if (!left) {
                return right;
            }
            if (!right) {
                return left;
            }
            if (left.type === "integer" && right.type === "integer") {
                if (e.operationType === "add") {
                    return PropertyValue.fromInteger(left.value + right.value);
                }
                else {
                    return PropertyValue.fromInteger(left.value - right.value);
                }
            }
            else if (left.type === "text" && right.type === "text") {
                if (e.operationType === "add") {
                    return PropertyValue.fromText(left.value + right.value);
                }
                else {
                    return null;
                }
            }
            else if (left.type === "amount" && right.type === "amount") {
                if (e.operationType === "add") {
                    return PropertyValue.fromAmount(uom_1.Amount.plus(left.value, right.value));
                }
                else {
                    return PropertyValue.fromAmount(uom_1.Amount.minus(left.value, right.value));
                }
            }
            return null;
        }
        case "MulExpr": {
            const left = evaluatePropertyValueExpr(e.left, properties);
            const right = evaluatePropertyValueExpr(e.right, properties);
            if (!left || !right) {
                return null;
            }
            if (left.type === "integer" && right.type === "integer") {
                if (e.operationType === "multiply") {
                    return PropertyValue.fromInteger(left.value * right.value);
                }
                else {
                    return PropertyValue.fromInteger(left.value / right.value);
                }
            }
            else if (left.type === "amount" && right.type === "integer") {
                if (e.operationType === "multiply") {
                    return PropertyValue.fromAmount(uom_1.Amount.times(left.value, right.value));
                }
                else {
                    return PropertyValue.fromAmount(uom_1.Amount.divide(left.value, right.value));
                }
            }
            else if (left.type === "integer" && right.type === "amount") {
                if (e.operationType === "multiply") {
                    return PropertyValue.fromAmount(uom_1.Amount.times(right.value, left.value));
                }
            }
            return null;
        }
        case "UnaryExpr": {
            const value = evaluatePropertyValueExpr(e.value, properties);
            if (!value || value.type === "text") {
                return null;
            }
            if (value.type === "integer") {
                return PropertyValue.fromInteger(-value.value);
            }
            else {
                return PropertyValue.fromAmount(uom_1.Amount.neg(value.value));
            }
        }
        default: {
            return exhaustive_check_1.exhaustiveCheck(e, true);
        }
    }
}
function _isMissingIdent(e, properties) {
    // If expression is an missing identifier it should match anything
    if (e.type === "IdentifierExpr") {
        if (!PropertyValueSet.hasProperty(e.name, properties)) {
            return true;
        }
    }
    return false;
}
//# sourceMappingURL=evaluate-ast.js.map